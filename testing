//////////////////////////////////////PLUGIN///////////////////////////////////
package main

import (
        "chat/protos"
        "context"
        "net/http"

        "github.com/grpc-ecosystem/grpc-gateway/runtime"
        "google.golang.org/grpc"
)

type middleware struct{}

func (m middleware) newGateway(ctx context.Context) (http.Handler) {

        opts := []grpc.DialOption{grpc.WithInsecure()}

        gwmux := runtime.NewServeMux()
        if err := protos.RegisterChatServiceHandlerFromEndpoint(ctx, gwmux, ":9000", opts); err != nil {
                return nil
        }

        return gwmux
}

var Middleware middleware
//////////////////////////////////////PLUGIN///////////////////////////////////

************************************MAIN Calling Function*****************************
package main

import (
        "context"
        "fmt"
        "log"
        "net/http"
        "os"
        "plugin"
)

type Middleware interface {
        newGateway(ctx context.Context) (http.Handler, error)
}

func runhttpendpoint() error {
        ctx := context.Background()
        ctx, cancel := context.WithCancel(ctx)
        defer cancel()
        log.Println("tanul")
        gwmux, err := newGateway(ctx)
        if err != nil {
                panic(err)
        }

        mux := http.NewServeMux()
        mux.Handle("/", gwmux)

        log.Println("grpc-gateway listen on localhost:8080")
        return http.ListenAndServe(":8080", mux)
}

func newGateway(ctx context.Context) (http.Handler, error) {
        plug, err := plugin.Open("chat.so")
        if err != nil {
                fmt.Println(err)
                os.Exit(-1)
        }
        symbol, err := plug.Lookup("Middleware")
        if err != nil {
                fmt.Println(err)
                os.Exit(-1)
        }        
        var myPlugin Middleware
        myPlugin, ok := symbol.(Middleware)
        if !ok {

                fmt.Println("The module have wrong type")
                os.Exit(-1)
        }

        return myPlugin.newGateway(ctx)
}

func main() {

        if err := runhttpendpoint(); err != nil {
                log.Fatal(err)
        }
}
************************************MAIN Calling Function*****************************
